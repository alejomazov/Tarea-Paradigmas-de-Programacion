#include <iostream>
#include <string>
#include <limits>
#include <fstream>
#include <sstream>
#include <cctype>
#include "Examen.h"
#include "Pregunta.h"
#include "PreguntaVF.h"
#include "PreguntaSM.h"
#include "PreguntaRC.h"

using namespace std;

// Función para mostrar el menú principal.
void mostrarMenu() {
    cout << "\n=== MENÚ ===" << endl;
    cout << "1. Crear Examen" << endl;
    cout << "2. Cargar Examen desde archivo TXT" << endl;
    cout << "3. Añadir Pregunta" << endl;
    cout << "4. Actualizar Pregunta" << endl;
    cout << "5. Borrar Pregunta" << endl;
    cout << "6. Consultar Info Pregunta" << endl;
    cout << "7. Filtrar Pregunta" << endl;
    cout << "8. Mostrar Evaluación" << endl;
    cout << "9. Mostrar Preguntas" << endl;
    cout << "10. Guardar Examen a archivo TXT" << endl;
    cout << "11. Salir" << endl;
    cout << "Elija una opción: ";
}

// Función para guardar el examen en un archivo TXT.
// Se utiliza un formato de bloques de 7 líneas (cada bloque contiene en el orden:
// enunciado, id, nivelBloom, puntaje, solucion, tiempoEstimado y tipo).
void guardarExamenEnArchivoTXT(const Examen &examen, const string &nombreArchivo = "Preguntas.txt") {
    ofstream outFile(nombreArchivo);
    if (!outFile.is_open()) {
        cout << "Error al abrir el archivo TXT para escribir." << endl;
        return;
    }
    outFile << "Preguntas" << endl << endl;
    for (int i = 0; i < examen.getNumPreguntasActual(); i++) {
        Pregunta* p = examen.getPregunta(i);
        outFile << "\"enunciado\": \"" << p->getEnunciado() << "\"," << endl;
        outFile << "\"id\":" << p->getId() << "," << endl;
        outFile << "\"nivelBloom\":" << p->getNivelBloom() << "," << endl;
        outFile << "\"puntaje\":" << p->getPuntaje() << "," << endl;
        outFile << "\"solucion\": \"" << p->getSolucion() << "\"," << endl;
        outFile << "\"tiempoEstimado\":" << p->getTiempoEstimado() << "," << endl;
        outFile << "\"tipo\": \"" << p->getTipo() << "\"" << endl << endl;
    }
    outFile.close();
    cout << "Examen guardado correctamente en " << nombreArchivo << endl;
}

// Función trim: elimina espacios y saltos de línea de ambos extremos de una cadena.
string trim(const string &str) {
    size_t first = str.find_first_not_of(" \t\n\r");
    if (first == string::npos)
        return "";
    size_t last = str.find_last_not_of(" \t\n\r");
    return str.substr(first, (last - first + 1));
}

// Función extraerNumeros: extrae sólo los caracteres numéricos de una cadena.
string extraerNumeros(const string &str) {
    string result;
    for (char c : str) {
        if (isdigit(static_cast<unsigned char>(c)))
            result.push_back(c);
    }
    return result;
}

// Función para cargar un examen desde un archivo TXT con el formato especificado.
// Se asume que el archivo tiene un encabezado "Preguntas" y cada pregunta ocupa 7 líneas en el orden:
// "enunciado", "id", "nivelBloom", "puntaje", "solucion", "tiempoEstimado" y "tipo".
// Se crea un objeto Examen con datos por defecto ("Examen TXT", "Asignatura TXT") y un máximo de 100 preguntas.
Examen* cargarExamenDesdeTXT(const string &nombreArchivo = "Preguntas.txt") {
    ifstream file(nombreArchivo);
    if (!file.is_open()) {
        cout << "Error al abrir el archivo TXT: " << nombreArchivo << endl;
        return nullptr;
    }

    // Creamos el examen con datos por defecto.
    Examen* examen = new Examen("Examen TXT", "Asignatura TXT", 100);
    string line;

    // Se salta el encabezado hasta encontrar "Preguntas"
    while (getline(file, line)) {
        if (line.find("Preguntas") != string::npos)
            break;
    }

    // Se lee cada bloque de 7 líneas para cada pregunta.
    while (getline(file, line)) {
        if (trim(line).empty())
            continue;

        string enunciado, solucion, tipo;
        int id, nivelBloom = 0, puntaje = 0, tiempoEstimado = 0;
        
        // 1. Línea: enunciado
        {
            size_t pos = line.find(":");
            if (pos != string::npos) {
                enunciado = trim(line.substr(pos + 1));
                if (!enunciado.empty() && enunciado.front() == '\"')
                    enunciado.erase(0, 1);
                if (!enunciado.empty() && enunciado.back() == ',')
                    enunciado.pop_back();
                enunciado = trim(enunciado);
                if (!enunciado.empty() && enunciado.back() == '\"')
                    enunciado.pop_back();
            }
        }

        // 2. Línea: id
        if (!getline(file, line)) break;
        {
            size_t pos = line.find(":");
            if (pos != string::npos) {
                string valor = trim(line.substr(pos + 1));
                // Extraemos sólo los dígitos.
                string digitos = extraerNumeros(valor);
                if (!digitos.empty())
                    id = stoi(digitos);
                else {
                    cout << "Error al convertir el campo 'id', valor no numérico: " << valor << endl;
                    id = 0;
                }
            }
        }

        // 3. Línea: nivelBloom
        if (!getline(file, line)) break;
        {
            size_t pos = line.find(":");
            if (pos != string::npos) {
                string valor = trim(line.substr(pos + 1));
                string digitos = extraerNumeros(valor);
                if (!digitos.empty())
                    nivelBloom = stoi(digitos);
                else {
                    cout << "Error al convertir 'nivelBloom', valor no numérico: " << valor << endl;
                    nivelBloom = 0;
                }
            }
        }

        // 4. Línea: puntaje
        if (!getline(file, line)) break;
        {
            size_t pos = line.find(":");
            if (pos != string::npos) {
                string valor = trim(line.substr(pos + 1));
                string digitos = extraerNumeros(valor);
                if (!digitos.empty())
                    puntaje = stoi(digitos);
                else {
                    cout << "Error al convertir 'puntaje', valor no numérico: " << valor << endl;
                    puntaje = 0;
                }
            }
        }

        // 5. Línea: solucion
        if (!getline(file, line)) break;
        {
            size_t pos = line.find(":");
            if (pos != string::npos) {
                solucion = trim(line.substr(pos + 1));
                if (!solucion.empty() && solucion.front() == '\"')
                    solucion.erase(0, 1);
                if (!solucion.empty() && solucion.back() == ',')
                    solucion.pop_back();
                solucion = trim(solucion);
                if (!solucion.empty() && solucion.back() == '\"')
                    solucion.pop_back();
            }
        }

        // 6. Línea: tiempoEstimado
        if (!getline(file, line)) break;
        {
            size_t pos = line.find(":");
            if (pos != string::npos) {
                string valor = trim(line.substr(pos + 1));
                string digitos = extraerNumeros(valor);
                if (!digitos.empty())
                    tiempoEstimado = stoi(digitos);
                else {
                    cout << "Error al convertir 'tiempoEstimado', valor no numérico: " << valor << endl;
                    tiempoEstimado = 0;
                }
            }
        }

        // 7. Línea: tipo
        if (!getline(file, line)) break;
        {
            size_t pos = line.find(":");
            if (pos != string::npos) {
                tipo = trim(line.substr(pos + 1));
                if (!tipo.empty() && tipo.front() == '\"')
                    tipo.erase(0, 1);
                if (!tipo.empty() && tipo.back() == '\"')
                    tipo.pop_back();
            }
        }

        // Creamos la pregunta según su tipo.
        Pregunta* pregunta = nullptr;
        if (tipo == "V")
            pregunta = new PreguntaVF(nivelBloom, tiempoEstimado, enunciado, solucion, puntaje);
        else if (tipo == "M")
            pregunta = new PreguntaSM(nivelBloom, tiempoEstimado, enunciado, solucion, puntaje);
        else if (tipo == "R")
            pregunta = new PreguntaRC(nivelBloom, tiempoEstimado, enunciado, solucion, puntaje);

      if (pregunta) {
                pregunta->setId(id);                      
                examen->agregarPregunta(pregunta);
                cout << "Cargada pregunta ID " << id << ": " << enunciado << endl;
            }
        } 

        file.close();
        return examen; 
    }
// Función para mostrar el contenido completo del archivo TXT (opcional, para depuración).
void mostrarExamenesGuardadosTXT(const string &nombreArchivo = "Preguntas.txt") {
    ifstream inFile(nombreArchivo);
    if (!inFile.is_open()) {
            cout << "No se puede abrir el archivo: " << nombreArchivo << endl;
            return;
        }
        string line;
        while(getline(inFile, line)) {
            cout << line << endl;
        }
        inFile.close();
}

int main() {
    Examen* examen = nullptr;
    int opcion;
    string temp;

    do {
        mostrarMenu();
        while (!(cin >> opcion) || (opcion < 1 || opcion > 11)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Ingreso no válido. Ingrese un número entre 1 y 11: ";
        }
        cin.ignore();

        switch(opcion) {
            case 1: { // Crear examen
                string nombre, asignatura;
                int cantidadPreguntas;
                cout << "Nombre del Examen: ";
                getline(cin, nombre);
                cout << "Asignatura: ";
                getline(cin, asignatura);
                cout << "Cantidad de Preguntas (máximo): ";
                cin >> cantidadPreguntas;
                cin.ignore();

                if (examen) {
                    delete examen;
                }
                examen = new Examen(nombre, asignatura, cantidadPreguntas);
                // Guardamos inmediatamente el examen vacío en el archivo TXT.
                guardarExamenEnArchivoTXT(*examen);
                break;
            }
            case 2: { // Cargar examen desde archivo TXT
                if (examen) {
                    delete examen;
                    examen = nullptr;
                }
                examen = cargarExamenDesdeTXT("Preguntas.txt");
                if (examen)
                    cout << "Examen cargado desde TXT." << endl;
                break;
            }
            case 3: { // Añadir pregunta
                if (!examen) {
                    cout << "Primero cree un examen." << endl;
                    break;
                }
                string enunciado, solucion;
                int nivelBloom, tiempo, puntaje;
                int tipoPregunta;
                do {
                    cout << "Tipo de Pregunta:" << endl;
                    cout << "1 = Verdadero/Falso" << endl;
                    cout << "2 = Selección Múltiple" << endl;
                    cout << "3 = Respuesta Corta" << endl;
                    cout << "Elija una opción: ";
                    cin >> tipoPregunta;
                    cin.ignore();
                } while (tipoPregunta < 1 || tipoPregunta > 3);

                cout << "Nivel de Taxonomía de Bloom (0-5): ";
                cin >> nivelBloom;
                cin.ignore();

                cout << "Tiempo Estimado (minutos): ";
                cin >> tiempo;
                cin.ignore();

                cout << "Enunciado: ";
                getline(cin, enunciado);

                cout << "Solución Esperada: ";
                getline(cin, solucion);

                cout << "Puntaje: ";
                cin >> puntaje;
                cin.ignore();

                Pregunta* nuevaPregunta = nullptr;
                if (tipoPregunta == 1)
                    nuevaPregunta = new PreguntaVF(nivelBloom, tiempo, enunciado, solucion, puntaje);
                else if (tipoPregunta == 2)
                    nuevaPregunta = new PreguntaSM(nivelBloom, tiempo, enunciado, solucion, puntaje);
                else if (tipoPregunta == 3)
                    nuevaPregunta = new PreguntaRC(nivelBloom, tiempo, enunciado, solucion, puntaje);

                examen->agregarPregunta(nuevaPregunta);
                // Actualizamos el archivo TXT con el examen modificado.
                guardarExamenEnArchivoTXT(*examen);
                break;
            }
            case 4: { // Actualizar pregunta
                if (!examen) {
                    cout << "No hay examen creado." << endl;
                    break;
                }

                cout << "\nEstas son las preguntas disponibles:\n";
                examen->mostrarPreguntas();

                int id;
                cout << "\nIngrese el ID de la pregunta a actualizar: ";
                cin >> id;
                cin.ignore();

                examen->actualizarPregunta(id);
                guardarExamenEnArchivoTXT(*examen);
                break;
            }
           
            case 5: { // Borrar pregunta
                if (!examen) {
                    cout << "No hay examen creado." << endl;
                    break;
                }
                cout << "\nEstas son las preguntas disponibles:\n";
                examen->mostrarPreguntas();

                char confirmacion;
                cout << "\n¿Está seguro de que desea borrar el ítem? (S/N): ";
                cin >> confirmacion;
                if (toupper(confirmacion) != 'S') {
                    cout << "Operación cancelada." << endl;
                    break;
                }
                int id;
                cout << "\nID de la pregunta a borrar: ";
                cin >> id;
                cin.ignore();
                examen->borrarPregunta(id);
                guardarExamenEnArchivoTXT(*examen);
                break;
            }
            case 6: { // Consultar información de una pregunta
                if (!examen) {
                    cout << "No hay examen creado." << endl;
                    break;
                }
                int id;
                cout << "ID de la pregunta a consultar: ";
                cin >> id;
                cin.ignore();
                examen->consultarPregunta(id);
                break;
            }
            case 7: { // Filtrar preguntas por nivel
                if (!examen) {
                    cout << "No hay examen creado." << endl;
                    break;
                }
                int nivel;
                cout << "Nivel de Bloom a filtrar (0-5): ";
                cin >> nivel;
                cin.ignore();
                examen->filtrarPreguntas(nivel);
                break;
            }
            case 8: { // Mostrar evaluación
                if (!examen) {
                    cout << "No hay examen creado." << endl;
                    break;
                }
                examen->mostrarExamen();
                break;
            }
            case 9: { // Mostrar preguntas
                if (!examen) {
                    cout << "No hay examen creado." << endl;
                    break;
                }
                examen->mostrarPreguntas();
                break;
            }
            case 10: { // Guardar examen a archivo TXT (opción explícita)
                if (!examen) {
                    cout << "No hay examen creado." << endl;
                    break;
                }
                guardarExamenEnArchivoTXT(*examen);
                break;
            }
            case 11: {
                 cout << "Que tenga una buena jornada. Adiós." << endl;
                break;
            }
            default: {
                cout << "Opción inválida." << endl;
                break;
            }
        }
    } while (opcion != 11);

    delete examen;
    return 0;
}
